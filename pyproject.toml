[tool.poetry]
name = "fastapi-full"
version = "0.1.0"
description = ""
authors = ["MatthieuLeNozach <matthieu.le.nozach@gmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.111.0"
sqlalchemy = "^2.0.30"
alembic = "^1.13.1"
uvicorn = "^0.30.1"
ruff = "^0.4.8"
pre-commit = "^3.7.1"
pydantic = "^2.7.3"
psycopg2-binary = "^2.9.9"
loguru = "^0.7.2"
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
pydantic-settings = "^2.3.1"
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
aiosqlite = "^0.20.0"
docker = "^7.1.0"
testcontainers = "^4.5.1"


[tool.poetry.group.dev.dependencies]
pytest = "^8.2.2"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 99
indent-width = 4

# Assume Python 3.8
target-version = "py38"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = [
#    "D",    # Docstring-related linting rules
    "E",
    "E4",   # Import error linting rules
    "E7",   # Indentation error linting rules
    "E9",   # Syntax error linting rules
    "F",    # Pyflakes linting rules
    "C90",  # McCabe complexity linting rules
    "I",    # Ignore missing docstrings linting rules
    "UP",   # Unneeded parenthesis detection linting rules
    "PT",   # Pytest test linting rules
    "PD",   # Pydocstyle linting rules
    "AIR",  # Assigning in __init__ method detection linting rules
    "RUF",  # Ruff-specific linting rules
]
ignore = [
    "D101",     # Ignore missing docstring
    "D203",     # Ignore linting rule D203 with the specified explanation
    "D213",     # Ignore linting rule D213 with the specified explanation
    "RUF006",   # Ignore Ruff linting rule RUF006 with the specified explanation
    "D100",     # Ignore linting rule D100 with the specified explanation
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

# 4. Ignore `E402` (import violations) in all `__init__.py` files, and in select subdirectories.
[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402", "D104"]
"**/{tests,docs,tools,alembic}/*" = ["D103", "E402", "E", "D"] # "RUF501" = lines too long
